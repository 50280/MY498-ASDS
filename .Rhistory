knitr::opts_chunk$set(echo = TRUE)
# Code written on:
# - R Version: 4.3.1.
# - Computer: MacBook Pro 14" with Apple M1 chip, 16 GB Memory, 2021 Model.
# - OS System: macOS Sequoia Version 15.0.1.
# Contact Caroline Wagner if you have any questions/comments: a.c.wagner@lse.ac.uk.
################################################################################
# Before you run this script...
################################################################################
# (1) Clear the working space.
rm(list = ls())
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
# (4) Set the toggle below to TRUE if you want to save the different outputs
# computed in this project, and FALSE if you do not want to save these outputs.
to_save <- TRUE
## Include an element here to read // download the data.
################################################################################
# PREREQUISITES
################################################################################
# List of required packages.
needed_packages <- c("tidyverse", "jsonlite")
# Identify which/whether packages are missing.
missing_packages <- needed_packages[!(needed_packages %in% installed.packages()[, "Package"])]
# Install any missing packages.
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
# Load all required packages.
invisible(lapply(needed_packages, library, character.only = TRUE))
# Set seed for reproducibility.
set.seed(89)
################################################################################
# Directory management.
################################################################################
# In which directory are the data?
ddir <- paste0(wdir, "/01_data")
# Where are the downloaded PRISM data?
# In which directory are the data?
pdir <- paste0(ddir, "/01_PRISM_data")
# In which directory is the code?
cdir <- paste0(wdir, "/02_code")
# Where are the helper functions in the code directory?
hdir <- paste0(cdir, "/01_helper-functions")
# In which directory are the outputs?
odir <- paste0(wdir, "/03_outputs")
# Do these directories exist? If not, create them.
if(dir.exists(ddir)){ } else{ dir.create(ddir) }
if(dir.exists(pdir)){ } else{ dir.create(pdir) }
if(dir.exists(cdir)){ } else{ dir.create(cdir) }
if(dir.exists(hdir)){ } else{ dir.create(hdir) }
if(dir.exists(odir)){ } else{ dir.create(odir) }
################################################################################
# SOURCE REQUIRED FUNCTIONS
################################################################################
setwd("~/Desktop/Local/MY498-capstone")
# Code written on:
# - R Version: 4.3.1.
# - Computer: MacBook Pro 14" with Apple M1 chip, 16 GB Memory, 2021 Model.
# - OS System: macOS Sequoia Version 15.0.1.
# Contact Caroline Wagner if you have any questions/comments: a.c.wagner@lse.ac.uk.
################################################################################
# Before you run this script...
################################################################################
# (1) Clear the working space.
rm(list = ls())
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
# (4) Set the toggle below to TRUE if you want to save the different outputs
# computed in this project, and FALSE if you do not want to save these outputs.
to_save <- TRUE
## Include an element here to read // download the data.
################################################################################
# PREREQUISITES
################################################################################
# List of required packages.
needed_packages <- c("tidyverse", "jsonlite")
# Identify which/whether packages are missing.
missing_packages <- needed_packages[!(needed_packages %in% installed.packages()[, "Package"])]
# Install any missing packages.
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
# Load all required packages.
invisible(lapply(needed_packages, library, character.only = TRUE))
# Set seed for reproducibility.
set.seed(89)
################################################################################
# Directory management.
################################################################################
# In which directory are the data?
ddir <- paste0(wdir, "/01_data")
# Where are the downloaded PRISM data?
# In which directory are the data?
pdir <- paste0(ddir, "/01_PRISM_data")
# In which directory is the code?
cdir <- paste0(wdir, "/02_code")
# Where are the helper functions in the code directory?
hdir <- paste0(cdir, "/01_helper-functions")
# In which directory are the outputs?
odir <- paste0(wdir, "/03_outputs")
# Do these directories exist? If not, create them.
if(dir.exists(ddir)){ } else{ dir.create(ddir) }
if(dir.exists(pdir)){ } else{ dir.create(pdir) }
if(dir.exists(cdir)){ } else{ dir.create(cdir) }
if(dir.exists(hdir)){ } else{ dir.create(hdir) }
if(dir.exists(odir)){ } else{ dir.create(odir) }
################################################################################
# SOURCE REQUIRED FUNCTIONS
################################################################################
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
wdir
setwd("~/Desktop/Local/MY498-capstone")
wdir
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
wdir
setwd("~/Desktop/Local/MY498-capstone")
getwd()
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
wdir
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
wdir
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
wdir
getwd()
setwd("~/Desktop/Local/MY498-capstone")
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
wdir <- getwd()
wdir
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
# wdir <- getwd()
wdir <- "/Users/carolinewagner/Desktop/Local/MY498-capstone"
# (4) Set the toggle below to TRUE if you want to save the different outputs
# computed in this project, and FALSE if you do not want to save these outputs.
to_save <- TRUE
# In which directory are the data?
ddir <- paste0(wdir, "/01_data")
# Where are the downloaded PRISM data?
# In which directory are the data?
pdir <- paste0(ddir, "/01_PRISM_data")
# In which directory is the code?
cdir <- paste0(wdir, "/02_code")
# Where are the helper functions in the code directory?
hdir <- paste0(cdir, "/01_helper-functions")
# In which directory are the outputs?
odir <- paste0(wdir, "/03_outputs")
# Do these directories exist? If not, create them.
if(dir.exists(ddir)){ } else{ dir.create(ddir) }
if(dir.exists(pdir)){ } else{ dir.create(pdir) }
if(dir.exists(cdir)){ } else{ dir.create(cdir) }
if(dir.exists(hdir)){ } else{ dir.create(hdir) }
if(dir.exists(odir)){ } else{ dir.create(odir) }
# List of required packages.
needed_packages <- c("tidyverse", "jsonlite")
# Identify which/whether packages are missing.
missing_packages <- needed_packages[!(needed_packages %in% installed.packages()[, "Package"])]
# Install any missing packages.
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
# Load all required packages.
invisible(lapply(needed_packages, library, character.only = TRUE))
# Set seed for reproducibility.
set.seed(89)
# Code written on:
# - R Version: 4.3.1.
# - Computer: MacBook Pro 14" with Apple M1 chip, 16 GB Memory, 2021 Model.
# - OS System: macOS Sequoia Version 15.0.1.
# Contact Caroline Wagner if you have any questions/comments: a.c.wagner@lse.ac.uk.
################################################################################
# Before you run this script...
################################################################################
# (1) Clear the working space.
rm(list = ls())
# (2) Set your working directory and save it to the object below, or replace getwd()
# with the path to the output directory where you want to save your data.
# wdir <- getwd()
wdir <- "/Users/carolinewagner/Desktop/Local/MY498-capstone"
# (4) Set the toggle below to TRUE if you want to save the different outputs
# computed in this project, and FALSE if you do not want to save these outputs.
to_save <- TRUE
## Include an element here to read // download the data.
################################################################################
# Directory management.
################################################################################
# In which directory are the data?
ddir <- paste0(wdir, "/01_data")
# Where are the downloaded PRISM data?
# In which directory are the data?
pdir <- paste0(ddir, "/01_PRISM_data")
# In which directory is the code?
cdir <- paste0(wdir, "/02_code")
# Where are the helper functions in the code directory?
hdir <- paste0(cdir, "/01_helper-functions")
# In which directory are the outputs?
odir <- paste0(wdir, "/03_outputs")
# Do these directories exist? If not, create them.
if(dir.exists(ddir)){ } else{ dir.create(ddir) }
if(dir.exists(pdir)){ } else{ dir.create(pdir) }
if(dir.exists(cdir)){ } else{ dir.create(cdir) }
if(dir.exists(hdir)){ } else{ dir.create(hdir) }
if(dir.exists(odir)){ } else{ dir.create(odir) }
################################################################################
# PREREQUISITES
################################################################################
# List of required packages.
needed_packages <- c("tidyverse", "jsonlite")
# Identify which/whether packages are missing.
missing_packages <- needed_packages[!(needed_packages %in% installed.packages()[, "Package"])]
# Install any missing packages.
if (length(missing_packages) > 0) {
install.packages(missing_packages)
}
# Load all required packages.
invisible(lapply(needed_packages, library, character.only = TRUE))
# Set seed for reproducibility.
set.seed(89)
################################################################################
# SOURCE REQUIRED FUNCTIONS
################################################################################
################################################################################
# LOAD THE DATA
################################################################################
# Define file names and their corresponding object names
file_names <- c("conversations.jsonl", "metadata.jsonl", "survey.jsonl", "utterances.jsonl")
# Function to read and clean JSONL file
read_clean_jsonl <- function(file_path) {
lines <- readLines(file_path, warn = FALSE)
lines <- gsub("\\bNaN\\b", "null", lines)  # Replace NaN with null
json_data <- lapply(lines, fromJSON)  # Convert each line to JSON
return(do.call(rbind, json_data))  # Combine into a data frame
}
# Loop to load each file and assign to its own variable
for (file in file_names) {
file_path <- file.path(pdir, file)
object_name <- sub("\\.jsonl$", "", file)
assign(object_name, read_clean_jsonl(file_path), envir = .GlobalEnv)
}
# Where is the data laeblling folder?
ldir <- paste0(ddir, "/02_data-labelling")
# In which directory is the code?
cdir <- paste0(wdir, "/02_code")
# Where are the helper functions in the code directory?
hdir <- paste0(cdir, "/01_helper-functions")
# In which directory are the outputs?
odir <- paste0(wdir, "/03_outputs")
# Do these directories exist? If not, create them.
if(dir.exists(ddir)){ } else{ dir.create(ddir) }
if(dir.exists(ldir)){ } else{ dir.create(ldir) }
################################################################################
# CLEAN / FORMAT THE DATA
################################################################################
# The present analyses use the 'utterances' dataset from the PRISM paper because
# each row is a single utterance (human-input, model response, score).
# Because in the beginning the same prompt gets different answers, some of the
# initial prompts are repeated several times in this dataset.
# Convert utterances to dataframe.
utterances <- as.data.frame(utterances)
# (1) Filter the conversations to include solely rows with user opening prompts.
opening_prompts <- utterances %>%
filter(turn == 0)
# (2) In the paper, each opening prompt receives answers from four possible models.
# Each of these are recorded as a separate line in utterances. Keep only one row per
# opening prompt, since the different model responses are not relevant to this project.
# Checked that each opening prompt has one turn id of zero.
opening_prompts <- opening_prompts %>%
filter(within_turn_id == 0)
# Sense-checked filtering with paper; reports 8'011 conversations = number of rows after filtering here.
# (3) Filter to include only answers written in english.
# Because (a) the fact that the labellers only speak english and therefore this is more difficult to check
# (b) the models might not be that efficient.
# Limitation: this means that the representativeness of the samples may be significantly reduced // need to check that in one of my appendices.
metadata <- as.data.frame(metadata)
opening_prompts <- opening_prompts %>%
filter(interaction_id %in% metadata$interaction_id[metadata$language_flag == "en"])
# (4) Remove rows where the opening prompt contains an empty string (removes two rows).
opening_prompts <- opening_prompts %>%
filter(user_prompt != "EMPTY STRING")
################################################################################
# EXPORT DATA TO LABEL
################################################################################
# Sample and select columns
sampled_prompts <- opening_prompts %>%
sample_frac(0.1) %>%
select(utterance_id, user_prompt)
# Format for export.
sampled_prompts$utterance_id <- unlist(sampled_prompts$utterance_id)
sampled_prompts$user_prompt <- unlist(sampled_prompts$user_prompt)
# Export to CSV
write.csv(sampled_prompts, "sampled_user_prompts.csv", row.names = FALSE)
# Sample and select columns
sampled_prompts <- opening_prompts %>%
sample_frac(0.1) %>%
select(utterance_id, user_prompt)
# Format for export.
sampled_prompts$utterance_id <- unlist(sampled_prompts$utterance_id)
print(ldir)
# Export to CSV
write.csv(sampled_prompts, paste0(ldir, "/ten_percent_prompts.csv"), row.names = FALSE)
# Export to CSV
write.csv(sampled_prompts, "ten_percent_prompts.csv", row.names = FALSE)
# Sample and select columns
sampled_prompts <- opening_prompts %>%
sample_frac(0.1) %>%
select(utterance_id, user_prompt)
# Format for export.
sampled_prompts$utterance_id <- unlist(sampled_prompts$utterance_id)
sampled_prompts$user_prompt <- unlist(sampled_prompts$user_prompt)
# Export to CSV
write.csv(sampled_prompts, "ten_percent_prompts.csv", row.names = FALSE)
# Sample and select columns
sampled_prompts <- opening_prompts %>%
sample_frac(0.1) %>%
select(utterance_id, user_prompt)
# Format for export.
sampled_prompts$utterance_id <- unlist(sampled_prompts$utterance_id)
sampled_prompts$user_prompt <- unlist(sampled_prompts$user_prompt)
write.csv(sampled_prompts, paste0(ldir, "/ten_percent_prompts.csv"), row.names = FALSE)
# Set seed for reproducibility.
set.seed(89)
# Export to CSV
write.csv(sampled_prompts, "ten_percent_prompts.csv", row.names = FALSE)
# Export to CSV
write.csv(sampled_prompts, "ten_percent_prompts.csv", row.names = FALSE)
# Sample and select columns
sampled_prompts <- opening_prompts %>%
sample_frac(0.1) %>%
select(utterance_id, user_prompt)
# Format for export.
sampled_prompts$utterance_id <- unlist(sampled_prompts$utterance_id)
sampled_prompts$user_prompt <- unlist(sampled_prompts$user_prompt)
write.csv(sampled_prompts, paste0(ldir, "/ten_percent_prompts.csv"), row.names = FALSE)
# Set seed for reproducibility.
set.seed(89)
# Sample and select columns
sampled_prompts <- opening_prompts %>%
sample_frac(0.1) %>%
select(utterance_id, user_prompt)
# Format for export.
sampled_prompts$utterance_id <- unlist(sampled_prompts$utterance_id)
sampled_prompts$user_prompt <- unlist(sampled_prompts$user_prompt)
# Export to CSV
write.csv(sampled_prompts, paste0(ldir, "/ten_percent_prompts.csv"), row.names = FALSE)
